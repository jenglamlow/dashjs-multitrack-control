{"version":3,"sources":["Video.jsx","App.js","serviceWorker.js","index.js"],"names":["init","Video","vRef","useRef","_useState","useState","window","AudioContext","webkitAudioContext","audioCtx","Object","slicedToArray","_useState3","Array","fill","map","_","createGain","channelGainNodes","_useState5","_useState6","toggleMap","setToggleMap","_useState7","MediaPlayer","create","player","onStreamInitialized","e","setCurrentTrack","getTracksFor","useEffect","vid","current","splitter","createChannelSplitter","merger","createChannelMerger","initialize","on","events","STREAM_INITIALIZED","createMediaElementSource","connect","destination","handleToggle","i","value","toConsumableArray","gain","react_default","a","createElement","ref","height","controls","Video_Toggle","label","isToggleLabel","idx","onChange","key","concat","Toggle","_ref","_useState9","_useState10","isToggle","setIsToggle","style","width","display","onClick","App","className","Video_Video","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d56753a.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport {MediaPlayer} from 'dashjs';\r\n\r\nlet init = false; // Can't use useState Hooks inside the callback from javascript function\r\n\r\nexport const Video = () => {\r\n  const vRef = useRef(null);\r\n  const [audioCtx] = useState(\r\n    new (window.AudioContext || window.webkitAudioContext)()\r\n  );\r\n  const [channelGainNodes] = useState(\r\n    Array(6)\r\n      .fill()\r\n      .map(_ => audioCtx.createGain())\r\n  );\r\n  const [toggleMap, setToggleMap] = useState(Array(6).fill(true));\r\n  const [player] = useState(MediaPlayer().create())\r\n\r\n  const onStreamInitialized = (e) => {\r\n    if (!init) {\r\n      // Init with Stereo\r\n      player.setCurrentTrack(player.getTracksFor('audio')[0]);\r\n      init = true;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const vid = vRef.current;\r\n    const splitter = audioCtx.createChannelSplitter(6);\r\n    const merger = audioCtx.createChannelMerger(6);\r\n\r\n    if (vid && player) {\r\n      player.initialize(vid, 'https://bitmovin-a.akamaihd.net/content/sintel/sintel.mpd', true)\r\n\r\n      player.on(MediaPlayer.events.STREAM_INITIALIZED, onStreamInitialized, this);\r\n \r\n      const source = audioCtx.createMediaElementSource(vid);\r\n      source.connect(splitter);\r\n      // Connect 6 splitter output to Channels Gain Node\r\n      splitter.connect(channelGainNodes[0], 0);\r\n      splitter.connect(channelGainNodes[1], 1);\r\n      splitter.connect(channelGainNodes[2], 2);\r\n      splitter.connect(channelGainNodes[3], 3);\r\n      splitter.connect(channelGainNodes[4], 4);\r\n      splitter.connect(channelGainNodes[5], 5);\r\n      // Merge the 6 channels gain node back to single merger\r\n      channelGainNodes[0].connect(merger, 0, 0);\r\n      channelGainNodes[1].connect(merger, 0, 1);\r\n      channelGainNodes[2].connect(merger, 0, 2);\r\n      channelGainNodes[3].connect(merger, 0, 3);\r\n      channelGainNodes[4].connect(merger, 0, 4);\r\n      channelGainNodes[5].connect(merger, 0, 5);\r\n      // Connecter merger to destination (speaker)\r\n      merger.connect(audioCtx.destination);\r\n    }\r\n  }, []);\r\n\r\n  const handleToggle = (i, value) => {\r\n    const map = [...toggleMap];\r\n    map[i] = value;\r\n    channelGainNodes[i].gain.value = value ? 1 : 0;\r\n    setToggleMap(map);\r\n  };\r\n\r\n  const switchTrack = (idx, value) => {\r\n    if(value) {\r\n      player.setCurrentTrack(player.getTracksFor('audio')[0]);\r\n    } else {\r\n      player.setCurrentTrack(player.getTracksFor('audio')[2]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <video\r\n        ref={vRef}\r\n        height=\"360\"\r\n        controls\r\n      />\r\n      <Toggle label={'5.1'} isToggleLabel={'Stereo'} idx={0} onChange={switchTrack}/>\r\n      {Array(6)\r\n        .fill(0)\r\n        .map((_, i) => (\r\n          <Toggle key={i} label={`Channel ${i+1} OFF`} isToggleLabel={`Channel ${i+1} ON`} idx={i} onChange={handleToggle} />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Toggle = ({ isToggleLabel, label, idx, onChange }) => {\r\n  const [isToggle, setIsToggle] = useState(true);\r\n\r\n  const handleClick = () => {\r\n    const value = !isToggle;\r\n    setIsToggle(value);\r\n    onChange(idx, value);\r\n  };\r\n\r\n  return (\r\n    <button style={{ width: \"9rem\", display: \"block\" }} onClick={handleClick}>\r\n      {isToggle ? `${isToggleLabel}` : `${label}`}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Video } from './Video';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Video/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}